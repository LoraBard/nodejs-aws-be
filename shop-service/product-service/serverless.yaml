service: product-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stage: dev
  httpApi:
    cors: true

environment:
  PG_HOST: ${env:PG_HOST}
  PG_PORT: ${env:PG_PORT}
  PG_DATABASE: ${env:PG_DATABASE}
  PG_USERNAME: ${env:PG_USERNAME}
  PG_PASSWORD: ${env:PG_PASSWORD}
  TOPIC_NAME: ${env:TOPIC_NAME}
  CATALOG_ITEMS_QUEUE_ARN: ${env:CATALOG_ITEMS_QUEUE_ARN}
  QUEUE_NAME: ${env:QUEUE_NAME}
  SNS_ARN: ${env:SNS_ARN}

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

resources:
  Resources:
    createProductTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: ${env:TOPIC_NAME}
    filteredSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn: !Ref createProductTopic
        Protocol: email
        Endpoint: "bardlora3@gmail.com"
        FilterPolicy:
          countOfProducts:
            - numeric:
              - ">="
              - 10
    mainSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn: !Ref createProductTopic
        Protocol: email
        Endpoint: "bard.lora@mail.ru"

iamRoleStatements:
  - Effect: Allow
    Action:
      - "sqs:ReceiveMessage"
    Resource: ${env:CATALOG_ITEMS_QUEUE_ARN}
  - Effect: Allow
    Action:
      - "sns:Publish"
    Resource: !Ref createProductTopic

custom:
  mainEmail: "bardlora3@gmail.com"
  reservedEmail: "bardlora3@gmail.com"
  webpack:
    webpackConfig: webpack.config.js
    includeModules:
      forceExclude: 'aws-sdk'
  dotenv:
    logging: false
    include:
      - PG_HOST
      - PG_PORT
      - PG_DATABASE
      - PG_USERNAME
      - PG_PASSWORD
      - TOPIC_NAME 
      - CATALOG_ITEMS_QUEUE_ARN
      - QUEUE_NAME
      - SNS_ARN

functions:
  - getProductsList:
      handler: handlers/getProductsList.getProductsList
      events:
        - httpApi:
            path: /products
            method: get
  - getProductsById:
      handler: handlers/getProductsById.getProductsById
      events:
        - httpApi:
            path: /products/{id}
            method: get
  - createProduct:
      handler: handlers/createProduct.createProduct
      events:
        - httpApi:
            path: /products
            method: POST
  - catalogBatchProcess:
      handler: handlers/catalogBatchProcess.catalogBatchProcess
      events:
        - sqs:
          batchSize: 5
          arn: ${env:CATALOG_ITEMS_QUEUE_ARN}